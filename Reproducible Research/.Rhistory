a
cond <- "(?<!Marine )(?|(Strong)|(Gusty)) WIND"   # Not begin with Marine, Preced with Strong or Gusty
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "(?<!Marine )(?|(Strong)|(Gusty)) WIND"   # Not begin with Marine, Preceed with Strong or Gusty
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Strong Wind"
cond <- ".?(?<!Marine )Hail.*$"    #Not begin with Marine
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=TRUE)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Hail"
a <- sort(unique(data$EVTYPE_c))
a
cond <- "High *Wind"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE)])
b
cond <- "High *Wind"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE)
data$EVTYPE_c[c] <- "High Wind"
cond <- "(?<!Marine )(?|(Strong)|(Gusty)) WIND"   # Not begin with Marine, Preceed with Strong or Gusty
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
c <- which(data$EVTYPE_c == 'MARINE TSTM WIND')
data$EVTYPE_c[c] <- "MARINE THUNDERSTORM WIND"
cond <- "Marine(?! Hail)"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Marine"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- ".?Flash.*$"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE)
data$EVTYPE_c[c] <- "Flash Flood"
cond <- "(?|(Coast)|(Beach)|(CSTL))"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Coastal Flood"
cond <- "(?<!Coastal |Flash )flood"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Flood"
a <- sort(unique(data$EVTYPE_c))
a
cond <- "Extreme"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Extreme.*(?!WET)"   #not begin with Coastal or Flash
b
cond <- "Extreme.*(?! WET)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Extreme (?! WET)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Extreme Cold/Wind Chill"
cond <- "Extreme.*WET)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
cond <- "Extreme.* WET"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Extreme.*WET"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Heavy Rain"
a <- sort(unique(data$EVTYPE_c))
a
cond <- "Free"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Free (?! FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Free(?! FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Free.*(?! FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freeze(?! FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freeze (?! FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freeze"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freez"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freez (?! FOG)"   #not begin with Coastal or Flash
b
cond <- "Freez (?!FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freez(?! FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
cond <- "Freez(?! FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freez(?!ing FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freez(?=ing FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Freez(?!ing FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Frost/Freeze"
cond <- "Freez(?=ing FOG)"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Freezing Fog"
a <- sort(unique(data$EVTYPE_c))
a
cond <- "Snow"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE)])
b
data[data$EVType=='Monthly Snowfall',]
data[data$EVTYPE=='Monthly Snowfall',]
View(data)
data <- data %>%
mutate(measure = sum(FATALITIES, INJURIES, PROPDMG, CROPDMG))
libraray(dplyr)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
data <- data %>%
mutate(measure = sum(FATALITIES, INJURIES, PROPDMG, CROPDMG))
data[1,]
data <- data %>%
mutate(measure = FATALITIES+INJURIES+PROPDMG+CROPDMG))
data <- data %>%
mutate(measure = FATALITIES+INJURIES+PROPDMG+CROPDMG)
data[1,]
cond <- "Monthly|Summary"
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE)
c
length(c)
data[c[1],]
data[c[2],]
a <- data[-(c),]
902180-117
902297-117
data <- data[-(c),]
cond <- "Monthly|Summary"
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE)
c
a <- sort(unique(data$EVTYPE_c))
a
cond <- "Ice"   #not begin with Coastal or Flash
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Ice Storm"
a <- sort(unique(data$EVTYPE_c))
a
cond <- "Ice"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Lake-Effect"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Lake.Effect"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
b
cond <- "Lake.Effect"
b <- unique(data$EVTYPE_c[grepl(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)])
c <- grep(cond, data$EVTYPE_c, ignore.case = TRUE, perl=T)
data$EVTYPE_c[c] <- "Lake-Effect Snow"
a
head(data)
head(data[data$EVTYPE_c=='Tornado',])
knitr::opts_chunk$set(echo = TRUE)
file_path = "~/workspace/AL-DataScienceCoursera/Reproducible Research"
analysis_event = read.csv(file.path(file_path,'StormEventTable.csv'))
head(data[data$EVTYPE_c %in% ('Tornado'),])
analysis_event$Event
head(data[data$EVTYPE_c %in% analysis_event$Event,])
temp = data[data$EVTYPE_c %in% analysis_event$Event,]
length(temp)
nrow(temp)
nrow(temp)/nrow(data)
temp.columns
temo.names
names(temp)
head(temp$PROPDMG)
summary(temp$PROPDMG)
str(temp)
summary(temp$PROPDMGEXP)
head(temp['PROPDMG'])
head(temp['PROPDMG','PROPDMGEXP'])
head(temp['PROPDMGEXP'])
head(temp[('PROPDMG','PROPDMGEXP')])
head(temp %>% select['PROPDMG','PROPDMGEXP'])
library(dplyr)
head(temp %>% select['PROPDMG','PROPDMGEXP'])
head(temp %>% select('PROPDMG','PROPDMGEXP'))
#1. Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
a <- which(temp$PROGDMGEXP == 'K' | temp$PROPDMGEXP =='k')
head(a)
a
a <- which((temp$PROGDMGEXP == 'K') | (temp$PROPDMGEXP =='k'))
a
a <- which((temp$PROGDMGEXP == 'K'))
a
class(temp$PROGDMGEXP)
head(temp$PROPDMGEXP)
class(data$PROPDMGEXP)
class(temp$PROPDMGEXP)
levels(temp$PROPDMGEXP)
class(temp$EVTYPE_c)
head(temp$EVTYPE_c)
a <- which(temp$EVTYPE_c == 'Tornado')
head(a)
b <- which(temp$PROPDMGEXP == 'K')
head(b)
b
a <- which((temp$PROPDMGEXP == 'K'))
head(a)
a <- which((temp$PROPDMGEXP == 'k'))
head(a)
summary(temp$PROPDMGEXP)
a <- which((temp$PROPDMGEXP == 'k') | (temp$PROPDMGEXP == 'K'))
length(a)
head(temp[a, temp$PROPDMGEXP])
head(temp[a, 'PROPDMGEXP'])
names(temp)
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 1000
a <- which((temp$PROPDMGEXP == 'M') | (temp$PROPDMGEXP == 'm'))
length(a)
a <- which((temp$PROPDMGEXP == 'M') | (temp$PROPDMGEXP == 'm'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 1000000
a <- which((temp$PROPDMGEXP == 'H') | (temp$PROPDMGEXP == 'h'))
length(a)
a <- which((temp$PROPDMGEXP == 'H') | (temp$PROPDMGEXP == 'h'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 100
summary(temp$PROPDMGEXP)
a <- which((temp$PROPDMGEXP == 'B') | (temp$PROPDMGEXP == 'b'))
length(b)
a <- which((temp$PROPDMGEXP == 'B') | (temp$PROPDMGEXP == 'b'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 1000000000
a <- which((temp$PROPDMGEXP == '+') | (temp$PROPDMGEXP == '1'))
length(a)
a <- which((temp$PROPDMGEXP == '+') | (temp$PROPDMGEXP == '1'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG']
a <- which((temp$PROPDMGEXP == '0') )
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 10
seq(2:9)
b <- seq(2,9)
b
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
length(a)
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * temp[a,'PROPDMGEXP']
temp[a,'PROPDMGEXP']
temp[a,'PROPDMGEXP']
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * temp[a,'PROPDMGEXP']
head(temp[a,'PROPDamage'])
temp[a,'PROPDamage']
temp[a,'PROPDMGEXP']
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
head(a)
temp[192463,]
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * temp[a,'PROPDMGEXP']
temp[192463,]
temp[192463,c['PROPDMG','PROPDMGEXP']]
temp[192463,('PROPDMG','PROPDMGEXP')]
temp[192463,['PROPDMG','PROPDMGEXP']]
temp[192463,]['PROPDMG','PROPDMGEXP']
temp[192463,'PROPDMG']
temp[192463,'PROPDMG','PROPDMGEXP']
temp[192463,('PROPDMG','PROPDMGEXP')]
temp[192463,c('PROPDMG','PROPDMGEXP')]
temp[a,c('PROPDMG','PROPDMGEXP')]
temp[a,'PROPDMGEXP']
temp[a,'PROPDMG']
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * temp[a,'PROPDMGEXP']
temp[a,]
temp[a,'PROPDamage'] = with(temp[a], PROPDMG * PROPDMGEXP)
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
temp[a] <- temp[a] %>%
mutate(PROPDMG * PROPDMGEXP)
head(temp[a,])
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
temp[a,] <- temp[a,] %>%
mutate(PROPDMG * PROPDMGEXP)
temp[a,] <- temp %>%
filter(a) %>%
mutate(PROPDMG * PROPDMGEXP)
temp %>%
filter(a) %>%
mutate(PROPDMG * PROPDMGEXP)
#a <- which((temp$PROPDMGEXP %in% seq(2,8)))
temp$PROPDamage = with(temp, PROPDMG * PROPDMGEXP)
temp$PROPDamage = temp$PROPDMG * temp$PROPDMGEXP
temp <- temp %>%
mutate (PROPDamage = PROPDMG * PROPDMGEXP)
temp = data[data$EVTYPE_c %in% analysis_event$Event,]
temp <- temp %>%
mutate (PROPDamage = PROPDMG * PROPDMGEXP)
names(temp)
temp = data[data$EVTYPE_c %in% analysis_event$Event,]
names(temp)
temp <- temp %>%
mutate (PROPDamage = PROPDMG * PROPDMGEXP)
head(levels(temp$PROPDMGEXP))
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
temp[a,'PROPDamage'] <- temp[a,'PROPDMG'] * levels(temp[a,'PROPDMGEXP'])
levels(temp[a,'PROPDMGEXP'])
temp[a,'PROPDMGEXP']
head(levels(temp$PROPDMGEXP))
head((temp$PROPDMGEXP))
a
temp[a,'PROPDMG']
temp[a,'PROPDMGEXP']
temp[a,'PROPDamage'] <- temp[a,'PROPDMG'] * temp[a,'PROPDMGEXP']
as.integer(temp[a,'PROPDMGEXP'])
as.integer(levels(temp[a,'PROPDMGEXP']))
levels(temp[a,'PROPDMGEXP'])
a[1,]
a[1]
temp[192463,'PROPDMGEXP']
level(temp[192463,'PROPDMGEXP'])
levels(temp[192463,'PROPDMGEXP'])
as.integer(temp[192463,'PROPDMGEXP'])
as.integer(levels(temp[192463,'PROPDMGEXP']))
as.integer(attr(temp[192463,'PROPDMGEXP'],"levels")
)
as.integer(base::levels(temp[192463,'PROPDMGEXP']))
temp[192463,'PROPDMGEXP']
temp[a,'PROPDMGEXP']
b <- as.integer(levels(temp[a,'PROPDMGEXP']))
b
temp[a,'PROPDMGEXP']
b<-temp[a,'PROPDMGEXP']
b
as.integer(b)
as.integer(levels(b))
b
sum(is.na(temp$PROPDMGEXP))
is.na(temp$PROPDMGEXP)
summary(temp$PROPDMGEXP)
summary(temp[a,'PROPDMGEXP'])
summary(relevel(temp[a,'PROPDMGEXP']))
summary(temp %>% filter(a) %>% summary('PROPDMGEXP'))
temp = data[data$EVTYPE_c %in% analysis_event$Event,]
temp$PROPDMGEXP <- levels(temp$PROPDMGEXP)
temp = data[data$EVTYPE_c %in% analysis_event$Event,]
summary(temp$PROPDMGEXP)
summary(temp$PROPDMGEXP)
sum(is.na(temp$PROPDMGEXP))
temp$PROPDMGEXP <- levels(temp$PROPDMGEXP)
temp$PROPDMGEXP <- as.character(temp$PROPDMGEXP)
a <- which((temp$PROPDMGEXP %in% seq(2,8)))
as.numeric(temp[a,'PROPDMGEXP'])
temp[a,'PROPDamage'] <- temp[a,'PROPDMG'] * as.numeric(temp[a,'PROPDMGEXP'])
a <- which((temp$PROPDMGEXP == 'H') | (temp$PROPDMGEXP == 'h'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 100
a <- which((temp$PROPDMGEXP == 'K') | (temp$PROPDMGEXP == 'k'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 1000
a <- which((temp$PROPDMGEXP == 'M') | (temp$PROPDMGEXP == 'm'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 1000000
a <- which((temp$PROPDMGEXP == 'B') | (temp$PROPDMGEXP == 'b'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 1000000000
a <- which((temp$PROPDMGEXP == '+') | (temp$PROPDMGEXP == '1'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG']
a <- which((temp$PROPDMGEXP == '0') )
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 10
names(temp)
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(PROPDamage)
head(temp$PROPDamage)
class(temp$PROPDamage)
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(totalPropDamage = sum(PROPDamage))
head(a)
a
View(a)
names(temp)
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(totalPropDamage = sum(PROPDamage))
View(a)
a <- temp %>%
group_by(EVTYPE_c)
View(a)
summary(temp$PROPDamage)
summary(temp$PROPDMG)
summary(is.na(temp$PROPDMG))
sum(is.na(temp$PROPDMG))
sum(temp$PROPDMG == '')
sum(temp$PROPDMG == ' ')
sum(temp$PROPDamage == 0)
sum(temp$PROPDamage >= 0)
sum(is.na(temp$PROPDamage))
head(temp[which(is.na(temp$PROPDamage)),])
head(temp[which(is.na(temp$PROPDamage)),c('PRODDMG','PRODDMGEXP','PROPDamange')])
head(temp[which(is.na(temp$PROPDamage)),c('PROPDMG','PRODDMGEXP','PROPDamange')])
head(temp[which(is.na(temp$PROPDamage)),c('PROPDMG','PRODDMGEXP','PROPDamage')])
temp[which(is.na(temp$PROPDamage)),c('PROPDMG','PROPDMGEXP','PROPDamage')]
head(temp[which(is.na(temp$PROPDamage)),c('PROPDMG','PROPDMGEXP','PROPDamage')])
a <- which((temp$PROPDMGEXP == ' ') )
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 0
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(totalPropDamage = sum(PROPDamage))
View(a)
head(temp[which(is.na(temp$PROPDamage)),c('PROPDMG','PROPDMGEXP','PROPDamage')])
a <- which((temp$PROPDMGEXP == ' '))
length(a)
a <- which((temp$PROPDMGEXP == ''))
length(a)
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 0
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(totalPropDamage = sum(PROPDamage))
head(temp[which(is.na(temp$PROPDamage)),c('PROPDMG','PROPDMGEXP','PROPDamage')])
a <- which((temp$PROPDMGEXP == '')
| (temp$PROPDMGEXP == '?')
| (temp$PROPDMGEXP == '-'))
temp[a,'PROPDamage'] = temp[a,'PROPDMG'] * 0
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(totalPropDamage = sum(PROPDamage))
head(temp[which(is.na(temp$PROPDamage)),c('PROPDMG','PROPDMGEXP','PROPDamage')])
View(a)
plot(temp$EVTYPE_c, temp$PROPDamage)
plot(a$EVTYPE_c, a$totalPROPDamage)
View(a)
class(a$totalPropDamage)
summary(a$EVTYPE_c)
a$EVTYPE_c
a$totalPROPDamage
plot(a$EVTYPE_c, a$totalPropDamage)
a$totalPropDamage
barplot(a$EVTYPE_c, a$totalPropDamage)
plot(a$EVTYPE_c, a$totalPropDamage, type='P')
plot(x=a$EVTYPE_c, y=a$totalPropDamage, type='P')
plot(x=a$EVTYPE_c, y=a$totalPropDamage, type='p')
str(a)
range(a$totalPropDamage)
library(ggplot)
install.packages(("ggplot"))
install.packages(("ggplot2"))
library(ggplot)
library(ggplot2)
gplot(x=a$EVTYPE_c, y=a$totalPropDamage)
qplot(x=a$EVTYPE_c, y=a$totalPropDamage)
qplot(x=EVTYPE_c, y=totalPropDamage, data=a)
dev.cur()
dev.off()
plot(cars)
plot(cars)
plot(cars)
qplot(x=EVTYPE_c, y=totalPropDamage, data=a)
qplot(x=EVTYPE_c, y=totalPropDamage, data=a)
plot(x=a$EVTYPE_c,y=a$totalPropDamage, type='p')
ggplot(data=a, aes(x=EVTYPE_c, y=totalPropDamage)) +
geom_bar()
ggplot(data=a, aes(x=EVTYPE_c, y=totalPropDamage)) +
geom_bar(stat="identity")
ggplot(data=a, aes(x=EVTYPE_c, y=totalPropDamage)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=90, hjust=1)
)
which(max(a$totalPropDamage))
max(a$totalPropDamage)
which.max(a$totalPropDamage)
a[which.max(a$totalPropDamage)]
a[which.max(a$totalPropDamage),]
event <- a[which.max(a$totalPropDamage),'EVTYPE_c']
event
summary(temp$INJURIES)
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(totalInjuries = sum(INJURIES))
event <- a[which.max(a$totalInjuries),'EVTYPE_c']
ggplot(data=a, aes(x=EVTYPE_c, y=totalInjuries)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=90, hjust=1))
Event
event
a <- temp %>%
group_by(EVTYPE_c) %>%
summarize(totalPropDamage = sum(PROPDamage))
event <- a[which.max(a$totalPropDamage),'EVTYPE_c']
library(ggplot2)
ggplot(data=a, aes(x=EVTYPE_c, y=totalPropDamage)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle=90, hjust=1))
event
nrows(temp)
nrow(temp)
cleaned = (nrow(temp)/nrow(data)*100,2)
cleaned = round(nrow(temp)/nrow(data)*100,2)
knitr::opts_chunk$set(echo = TRUE)
library(dplry)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
setwd("~/workspace/AL-DataScienceCoursera/Reproducible Research")
